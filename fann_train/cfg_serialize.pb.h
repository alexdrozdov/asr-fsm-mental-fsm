// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg_serialize.proto

#ifndef PROTOBUF_cfg_5fserialize_2eproto__INCLUDED
#define PROTOBUF_cfg_5fserialize_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace fann_train_cfg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cfg_5fserialize_2eproto();
void protobuf_AssignDesc_cfg_5fserialize_2eproto();
void protobuf_ShutdownFile_cfg_5fserialize_2eproto();

class FannTrainProject;
class FannTrainProject_FannOptions;
class FannTrainProject_TrainIo;
class FannTrainProject_TrainIo_FValues;
class FannTrainProject_TrainEntry;

enum FannTrainProject_TrainIo_IoType {
  FannTrainProject_TrainIo_IoType_IOT_VALUE = 0,
  FannTrainProject_TrainIo_IoType_IOT_FILE = 1,
  FannTrainProject_TrainIo_IoType_IOT_VECTOR = 2
};
bool FannTrainProject_TrainIo_IoType_IsValid(int value);
const FannTrainProject_TrainIo_IoType FannTrainProject_TrainIo_IoType_IoType_MIN = FannTrainProject_TrainIo_IoType_IOT_VALUE;
const FannTrainProject_TrainIo_IoType FannTrainProject_TrainIo_IoType_IoType_MAX = FannTrainProject_TrainIo_IoType_IOT_VECTOR;
const int FannTrainProject_TrainIo_IoType_IoType_ARRAYSIZE = FannTrainProject_TrainIo_IoType_IoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FannTrainProject_TrainIo_IoType_descriptor();
inline const ::std::string& FannTrainProject_TrainIo_IoType_Name(FannTrainProject_TrainIo_IoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FannTrainProject_TrainIo_IoType_descriptor(), value);
}
inline bool FannTrainProject_TrainIo_IoType_Parse(
    const ::std::string& name, FannTrainProject_TrainIo_IoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FannTrainProject_TrainIo_IoType>(
    FannTrainProject_TrainIo_IoType_descriptor(), name, value);
}
// ===================================================================

class FannTrainProject_FannOptions : public ::google::protobuf::Message {
 public:
  FannTrainProject_FannOptions();
  virtual ~FannTrainProject_FannOptions();
  
  FannTrainProject_FannOptions(const FannTrainProject_FannOptions& from);
  
  inline FannTrainProject_FannOptions& operator=(const FannTrainProject_FannOptions& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FannTrainProject_FannOptions& default_instance();
  
  void Swap(FannTrainProject_FannOptions* other);
  
  // implements Message ----------------------------------------------
  
  FannTrainProject_FannOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FannTrainProject_FannOptions& from);
  void MergeFrom(const FannTrainProject_FannOptions& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 num_input = 1;
  inline bool has_num_input() const;
  inline void clear_num_input();
  static const int kNumInputFieldNumber = 1;
  inline ::google::protobuf::int32 num_input() const;
  inline void set_num_input(::google::protobuf::int32 value);
  
  // required int32 num_output = 2;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 2;
  inline ::google::protobuf::int32 num_output() const;
  inline void set_num_output(::google::protobuf::int32 value);
  
  // required int32 num_layers = 3;
  inline bool has_num_layers() const;
  inline void clear_num_layers();
  static const int kNumLayersFieldNumber = 3;
  inline ::google::protobuf::int32 num_layers() const;
  inline void set_num_layers(::google::protobuf::int32 value);
  
  // required int32 num_neurons_hidden = 4;
  inline bool has_num_neurons_hidden() const;
  inline void clear_num_neurons_hidden();
  static const int kNumNeuronsHiddenFieldNumber = 4;
  inline ::google::protobuf::int32 num_neurons_hidden() const;
  inline void set_num_neurons_hidden(::google::protobuf::int32 value);
  
  // required double desired_error = 5;
  inline bool has_desired_error() const;
  inline void clear_desired_error();
  static const int kDesiredErrorFieldNumber = 5;
  inline double desired_error() const;
  inline void set_desired_error(double value);
  
  // required int32 max_epochs = 6;
  inline bool has_max_epochs() const;
  inline void clear_max_epochs();
  static const int kMaxEpochsFieldNumber = 6;
  inline ::google::protobuf::int32 max_epochs() const;
  inline void set_max_epochs(::google::protobuf::int32 value);
  
  // required int32 epochs_between_reports = 7;
  inline bool has_epochs_between_reports() const;
  inline void clear_epochs_between_reports();
  static const int kEpochsBetweenReportsFieldNumber = 7;
  inline ::google::protobuf::int32 epochs_between_reports() const;
  inline void set_epochs_between_reports(::google::protobuf::int32 value);
  
  // required bool b_i = 8;
  inline bool has_b_i() const;
  inline void clear_b_i();
  static const int kBIFieldNumber = 8;
  inline bool b_i() const;
  inline void set_b_i(bool value);
  
  // required bool b_o = 9;
  inline bool has_b_o() const;
  inline void clear_b_o();
  static const int kBOFieldNumber = 9;
  inline bool b_o() const;
  inline void set_b_o(bool value);
  
  // required bool b_h = 10;
  inline bool has_b_h() const;
  inline void clear_b_h();
  static const int kBHFieldNumber = 10;
  inline bool b_h() const;
  inline void set_b_h(bool value);
  
  // required bool b_l = 11;
  inline bool has_b_l() const;
  inline void clear_b_l();
  static const int kBLFieldNumber = 11;
  inline bool b_l() const;
  inline void set_b_l(bool value);
  
  // required bool b_t = 12;
  inline bool has_b_t() const;
  inline void clear_b_t();
  static const int kBTFieldNumber = 12;
  inline bool b_t() const;
  inline void set_b_t(bool value);
  
  // required bool b_n = 13;
  inline bool has_b_n() const;
  inline void clear_b_n();
  static const int kBNFieldNumber = 13;
  inline bool b_n() const;
  inline void set_b_n(bool value);
  
  // optional string fann_file_name = 14;
  inline bool has_fann_file_name() const;
  inline void clear_fann_file_name();
  static const int kFannFileNameFieldNumber = 14;
  inline const ::std::string& fann_file_name() const;
  inline void set_fann_file_name(const ::std::string& value);
  inline void set_fann_file_name(const char* value);
  inline void set_fann_file_name(const char* value, size_t size);
  inline ::std::string* mutable_fann_file_name();
  
  // optional bool fann_trained = 15;
  inline bool has_fann_trained() const;
  inline void clear_fann_trained();
  static const int kFannTrainedFieldNumber = 15;
  inline bool fann_trained() const;
  inline void set_fann_trained(bool value);
  
  // @@protoc_insertion_point(class_scope:fann_train_cfg.FannTrainProject.FannOptions)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 num_input_;
  ::google::protobuf::int32 num_output_;
  ::google::protobuf::int32 num_layers_;
  ::google::protobuf::int32 num_neurons_hidden_;
  double desired_error_;
  ::google::protobuf::int32 max_epochs_;
  ::google::protobuf::int32 epochs_between_reports_;
  bool b_i_;
  bool b_o_;
  bool b_h_;
  bool b_l_;
  bool b_t_;
  bool b_n_;
  ::std::string* fann_file_name_;
  static const ::std::string _default_fann_file_name_;
  bool fann_trained_;
  friend void  protobuf_AddDesc_cfg_5fserialize_2eproto();
  friend void protobuf_AssignDesc_cfg_5fserialize_2eproto();
  friend void protobuf_ShutdownFile_cfg_5fserialize_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FannTrainProject_FannOptions* default_instance_;
};
// -------------------------------------------------------------------

class FannTrainProject_TrainIo_FValues : public ::google::protobuf::Message {
 public:
  FannTrainProject_TrainIo_FValues();
  virtual ~FannTrainProject_TrainIo_FValues();
  
  FannTrainProject_TrainIo_FValues(const FannTrainProject_TrainIo_FValues& from);
  
  inline FannTrainProject_TrainIo_FValues& operator=(const FannTrainProject_TrainIo_FValues& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FannTrainProject_TrainIo_FValues& default_instance();
  
  void Swap(FannTrainProject_TrainIo_FValues* other);
  
  // implements Message ----------------------------------------------
  
  FannTrainProject_TrainIo_FValues* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FannTrainProject_TrainIo_FValues& from);
  void MergeFrom(const FannTrainProject_TrainIo_FValues& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated double values = 1;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline double values(int index) const;
  inline void set_values(int index, double value);
  inline void add_values(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      values() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_values();
  
  // @@protoc_insertion_point(class_scope:fann_train_cfg.FannTrainProject.TrainIo.FValues)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< double > values_;
  friend void  protobuf_AddDesc_cfg_5fserialize_2eproto();
  friend void protobuf_AssignDesc_cfg_5fserialize_2eproto();
  friend void protobuf_ShutdownFile_cfg_5fserialize_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FannTrainProject_TrainIo_FValues* default_instance_;
};
// -------------------------------------------------------------------

class FannTrainProject_TrainIo : public ::google::protobuf::Message {
 public:
  FannTrainProject_TrainIo();
  virtual ~FannTrainProject_TrainIo();
  
  FannTrainProject_TrainIo(const FannTrainProject_TrainIo& from);
  
  inline FannTrainProject_TrainIo& operator=(const FannTrainProject_TrainIo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FannTrainProject_TrainIo& default_instance();
  
  void Swap(FannTrainProject_TrainIo* other);
  
  // implements Message ----------------------------------------------
  
  FannTrainProject_TrainIo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FannTrainProject_TrainIo& from);
  void MergeFrom(const FannTrainProject_TrainIo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FannTrainProject_TrainIo_FValues FValues;
  
  typedef FannTrainProject_TrainIo_IoType IoType;
  static const IoType IOT_VALUE = FannTrainProject_TrainIo_IoType_IOT_VALUE;
  static const IoType IOT_FILE = FannTrainProject_TrainIo_IoType_IOT_FILE;
  static const IoType IOT_VECTOR = FannTrainProject_TrainIo_IoType_IOT_VECTOR;
  static inline bool IoType_IsValid(int value) {
    return FannTrainProject_TrainIo_IoType_IsValid(value);
  }
  static const IoType IoType_MIN =
    FannTrainProject_TrainIo_IoType_IoType_MIN;
  static const IoType IoType_MAX =
    FannTrainProject_TrainIo_IoType_IoType_MAX;
  static const int IoType_ARRAYSIZE =
    FannTrainProject_TrainIo_IoType_IoType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IoType_descriptor() {
    return FannTrainProject_TrainIo_IoType_descriptor();
  }
  static inline const ::std::string& IoType_Name(IoType value) {
    return FannTrainProject_TrainIo_IoType_Name(value);
  }
  static inline bool IoType_Parse(const ::std::string& name,
      IoType* value) {
    return FannTrainProject_TrainIo_IoType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .fann_train_cfg.FannTrainProject.TrainIo.IoType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::fann_train_cfg::FannTrainProject_TrainIo_IoType type() const;
  inline void set_type(::fann_train_cfg::FannTrainProject_TrainIo_IoType value);
  
  // optional string file_name = 2;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  
  // optional double value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline double value() const;
  inline void set_value(double value);
  
  // repeated double values = 4;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 4;
  inline double values(int index) const;
  inline void set_values(int index, double value);
  inline void add_values(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      values() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_values();
  
  // repeated .fann_train_cfg.FannTrainProject.TrainIo.FValues fvalues = 5;
  inline int fvalues_size() const;
  inline void clear_fvalues();
  static const int kFvaluesFieldNumber = 5;
  inline const ::fann_train_cfg::FannTrainProject_TrainIo_FValues& fvalues(int index) const;
  inline ::fann_train_cfg::FannTrainProject_TrainIo_FValues* mutable_fvalues(int index);
  inline ::fann_train_cfg::FannTrainProject_TrainIo_FValues* add_fvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::fann_train_cfg::FannTrainProject_TrainIo_FValues >&
      fvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::fann_train_cfg::FannTrainProject_TrainIo_FValues >*
      mutable_fvalues();
  
  // optional string extract_regex = 6;
  inline bool has_extract_regex() const;
  inline void clear_extract_regex();
  static const int kExtractRegexFieldNumber = 6;
  inline const ::std::string& extract_regex() const;
  inline void set_extract_regex(const ::std::string& value);
  inline void set_extract_regex(const char* value);
  inline void set_extract_regex(const char* value, size_t size);
  inline ::std::string* mutable_extract_regex();
  
  // @@protoc_insertion_point(class_scope:fann_train_cfg.FannTrainProject.TrainIo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::std::string* file_name_;
  static const ::std::string _default_file_name_;
  double value_;
  ::google::protobuf::RepeatedField< double > values_;
  ::google::protobuf::RepeatedPtrField< ::fann_train_cfg::FannTrainProject_TrainIo_FValues > fvalues_;
  ::std::string* extract_regex_;
  static const ::std::string _default_extract_regex_;
  friend void  protobuf_AddDesc_cfg_5fserialize_2eproto();
  friend void protobuf_AssignDesc_cfg_5fserialize_2eproto();
  friend void protobuf_ShutdownFile_cfg_5fserialize_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FannTrainProject_TrainIo* default_instance_;
};
// -------------------------------------------------------------------

class FannTrainProject_TrainEntry : public ::google::protobuf::Message {
 public:
  FannTrainProject_TrainEntry();
  virtual ~FannTrainProject_TrainEntry();
  
  FannTrainProject_TrainEntry(const FannTrainProject_TrainEntry& from);
  
  inline FannTrainProject_TrainEntry& operator=(const FannTrainProject_TrainEntry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FannTrainProject_TrainEntry& default_instance();
  
  void Swap(FannTrainProject_TrainEntry* other);
  
  // implements Message ----------------------------------------------
  
  FannTrainProject_TrainEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FannTrainProject_TrainEntry& from);
  void MergeFrom(const FannTrainProject_TrainEntry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required .fann_train_cfg.FannTrainProject.TrainIo input = 2;
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 2;
  inline const ::fann_train_cfg::FannTrainProject_TrainIo& input() const;
  inline ::fann_train_cfg::FannTrainProject_TrainIo* mutable_input();
  
  // required .fann_train_cfg.FannTrainProject.TrainIo output = 3;
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 3;
  inline const ::fann_train_cfg::FannTrainProject_TrainIo& output() const;
  inline ::fann_train_cfg::FannTrainProject_TrainIo* mutable_output();
  
  // @@protoc_insertion_point(class_scope:fann_train_cfg.FannTrainProject.TrainEntry)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::fann_train_cfg::FannTrainProject_TrainIo* input_;
  ::fann_train_cfg::FannTrainProject_TrainIo* output_;
  friend void  protobuf_AddDesc_cfg_5fserialize_2eproto();
  friend void protobuf_AssignDesc_cfg_5fserialize_2eproto();
  friend void protobuf_ShutdownFile_cfg_5fserialize_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FannTrainProject_TrainEntry* default_instance_;
};
// -------------------------------------------------------------------

class FannTrainProject : public ::google::protobuf::Message {
 public:
  FannTrainProject();
  virtual ~FannTrainProject();
  
  FannTrainProject(const FannTrainProject& from);
  
  inline FannTrainProject& operator=(const FannTrainProject& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FannTrainProject& default_instance();
  
  void Swap(FannTrainProject* other);
  
  // implements Message ----------------------------------------------
  
  FannTrainProject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FannTrainProject& from);
  void MergeFrom(const FannTrainProject& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FannTrainProject_FannOptions FannOptions;
  typedef FannTrainProject_TrainIo TrainIo;
  typedef FannTrainProject_TrainEntry TrainEntry;
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string file_name = 2;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  
  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  
  // required .fann_train_cfg.FannTrainProject.FannOptions fann_opts = 4;
  inline bool has_fann_opts() const;
  inline void clear_fann_opts();
  static const int kFannOptsFieldNumber = 4;
  inline const ::fann_train_cfg::FannTrainProject_FannOptions& fann_opts() const;
  inline ::fann_train_cfg::FannTrainProject_FannOptions* mutable_fann_opts();
  
  // repeated .fann_train_cfg.FannTrainProject.TrainEntry entries = 5;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 5;
  inline const ::fann_train_cfg::FannTrainProject_TrainEntry& entries(int index) const;
  inline ::fann_train_cfg::FannTrainProject_TrainEntry* mutable_entries(int index);
  inline ::fann_train_cfg::FannTrainProject_TrainEntry* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::fann_train_cfg::FannTrainProject_TrainEntry >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::fann_train_cfg::FannTrainProject_TrainEntry >*
      mutable_entries();
  
  // @@protoc_insertion_point(class_scope:fann_train_cfg.FannTrainProject)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* file_name_;
  static const ::std::string _default_file_name_;
  ::std::string* description_;
  static const ::std::string _default_description_;
  ::fann_train_cfg::FannTrainProject_FannOptions* fann_opts_;
  ::google::protobuf::RepeatedPtrField< ::fann_train_cfg::FannTrainProject_TrainEntry > entries_;
  friend void  protobuf_AddDesc_cfg_5fserialize_2eproto();
  friend void protobuf_AssignDesc_cfg_5fserialize_2eproto();
  friend void protobuf_ShutdownFile_cfg_5fserialize_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FannTrainProject* default_instance_;
};
// ===================================================================


// ===================================================================

// FannTrainProject_FannOptions

// required int32 num_input = 1;
inline bool FannTrainProject_FannOptions::has_num_input() const {
  return _has_bit(0);
}
inline void FannTrainProject_FannOptions::clear_num_input() {
  num_input_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 FannTrainProject_FannOptions::num_input() const {
  return num_input_;
}
inline void FannTrainProject_FannOptions::set_num_input(::google::protobuf::int32 value) {
  _set_bit(0);
  num_input_ = value;
}

// required int32 num_output = 2;
inline bool FannTrainProject_FannOptions::has_num_output() const {
  return _has_bit(1);
}
inline void FannTrainProject_FannOptions::clear_num_output() {
  num_output_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 FannTrainProject_FannOptions::num_output() const {
  return num_output_;
}
inline void FannTrainProject_FannOptions::set_num_output(::google::protobuf::int32 value) {
  _set_bit(1);
  num_output_ = value;
}

// required int32 num_layers = 3;
inline bool FannTrainProject_FannOptions::has_num_layers() const {
  return _has_bit(2);
}
inline void FannTrainProject_FannOptions::clear_num_layers() {
  num_layers_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 FannTrainProject_FannOptions::num_layers() const {
  return num_layers_;
}
inline void FannTrainProject_FannOptions::set_num_layers(::google::protobuf::int32 value) {
  _set_bit(2);
  num_layers_ = value;
}

// required int32 num_neurons_hidden = 4;
inline bool FannTrainProject_FannOptions::has_num_neurons_hidden() const {
  return _has_bit(3);
}
inline void FannTrainProject_FannOptions::clear_num_neurons_hidden() {
  num_neurons_hidden_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 FannTrainProject_FannOptions::num_neurons_hidden() const {
  return num_neurons_hidden_;
}
inline void FannTrainProject_FannOptions::set_num_neurons_hidden(::google::protobuf::int32 value) {
  _set_bit(3);
  num_neurons_hidden_ = value;
}

// required double desired_error = 5;
inline bool FannTrainProject_FannOptions::has_desired_error() const {
  return _has_bit(4);
}
inline void FannTrainProject_FannOptions::clear_desired_error() {
  desired_error_ = 0;
  _clear_bit(4);
}
inline double FannTrainProject_FannOptions::desired_error() const {
  return desired_error_;
}
inline void FannTrainProject_FannOptions::set_desired_error(double value) {
  _set_bit(4);
  desired_error_ = value;
}

// required int32 max_epochs = 6;
inline bool FannTrainProject_FannOptions::has_max_epochs() const {
  return _has_bit(5);
}
inline void FannTrainProject_FannOptions::clear_max_epochs() {
  max_epochs_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 FannTrainProject_FannOptions::max_epochs() const {
  return max_epochs_;
}
inline void FannTrainProject_FannOptions::set_max_epochs(::google::protobuf::int32 value) {
  _set_bit(5);
  max_epochs_ = value;
}

// required int32 epochs_between_reports = 7;
inline bool FannTrainProject_FannOptions::has_epochs_between_reports() const {
  return _has_bit(6);
}
inline void FannTrainProject_FannOptions::clear_epochs_between_reports() {
  epochs_between_reports_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 FannTrainProject_FannOptions::epochs_between_reports() const {
  return epochs_between_reports_;
}
inline void FannTrainProject_FannOptions::set_epochs_between_reports(::google::protobuf::int32 value) {
  _set_bit(6);
  epochs_between_reports_ = value;
}

// required bool b_i = 8;
inline bool FannTrainProject_FannOptions::has_b_i() const {
  return _has_bit(7);
}
inline void FannTrainProject_FannOptions::clear_b_i() {
  b_i_ = false;
  _clear_bit(7);
}
inline bool FannTrainProject_FannOptions::b_i() const {
  return b_i_;
}
inline void FannTrainProject_FannOptions::set_b_i(bool value) {
  _set_bit(7);
  b_i_ = value;
}

// required bool b_o = 9;
inline bool FannTrainProject_FannOptions::has_b_o() const {
  return _has_bit(8);
}
inline void FannTrainProject_FannOptions::clear_b_o() {
  b_o_ = false;
  _clear_bit(8);
}
inline bool FannTrainProject_FannOptions::b_o() const {
  return b_o_;
}
inline void FannTrainProject_FannOptions::set_b_o(bool value) {
  _set_bit(8);
  b_o_ = value;
}

// required bool b_h = 10;
inline bool FannTrainProject_FannOptions::has_b_h() const {
  return _has_bit(9);
}
inline void FannTrainProject_FannOptions::clear_b_h() {
  b_h_ = false;
  _clear_bit(9);
}
inline bool FannTrainProject_FannOptions::b_h() const {
  return b_h_;
}
inline void FannTrainProject_FannOptions::set_b_h(bool value) {
  _set_bit(9);
  b_h_ = value;
}

// required bool b_l = 11;
inline bool FannTrainProject_FannOptions::has_b_l() const {
  return _has_bit(10);
}
inline void FannTrainProject_FannOptions::clear_b_l() {
  b_l_ = false;
  _clear_bit(10);
}
inline bool FannTrainProject_FannOptions::b_l() const {
  return b_l_;
}
inline void FannTrainProject_FannOptions::set_b_l(bool value) {
  _set_bit(10);
  b_l_ = value;
}

// required bool b_t = 12;
inline bool FannTrainProject_FannOptions::has_b_t() const {
  return _has_bit(11);
}
inline void FannTrainProject_FannOptions::clear_b_t() {
  b_t_ = false;
  _clear_bit(11);
}
inline bool FannTrainProject_FannOptions::b_t() const {
  return b_t_;
}
inline void FannTrainProject_FannOptions::set_b_t(bool value) {
  _set_bit(11);
  b_t_ = value;
}

// required bool b_n = 13;
inline bool FannTrainProject_FannOptions::has_b_n() const {
  return _has_bit(12);
}
inline void FannTrainProject_FannOptions::clear_b_n() {
  b_n_ = false;
  _clear_bit(12);
}
inline bool FannTrainProject_FannOptions::b_n() const {
  return b_n_;
}
inline void FannTrainProject_FannOptions::set_b_n(bool value) {
  _set_bit(12);
  b_n_ = value;
}

// optional string fann_file_name = 14;
inline bool FannTrainProject_FannOptions::has_fann_file_name() const {
  return _has_bit(13);
}
inline void FannTrainProject_FannOptions::clear_fann_file_name() {
  if (fann_file_name_ != &_default_fann_file_name_) {
    fann_file_name_->clear();
  }
  _clear_bit(13);
}
inline const ::std::string& FannTrainProject_FannOptions::fann_file_name() const {
  return *fann_file_name_;
}
inline void FannTrainProject_FannOptions::set_fann_file_name(const ::std::string& value) {
  _set_bit(13);
  if (fann_file_name_ == &_default_fann_file_name_) {
    fann_file_name_ = new ::std::string;
  }
  fann_file_name_->assign(value);
}
inline void FannTrainProject_FannOptions::set_fann_file_name(const char* value) {
  _set_bit(13);
  if (fann_file_name_ == &_default_fann_file_name_) {
    fann_file_name_ = new ::std::string;
  }
  fann_file_name_->assign(value);
}
inline void FannTrainProject_FannOptions::set_fann_file_name(const char* value, size_t size) {
  _set_bit(13);
  if (fann_file_name_ == &_default_fann_file_name_) {
    fann_file_name_ = new ::std::string;
  }
  fann_file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FannTrainProject_FannOptions::mutable_fann_file_name() {
  _set_bit(13);
  if (fann_file_name_ == &_default_fann_file_name_) {
    fann_file_name_ = new ::std::string;
  }
  return fann_file_name_;
}

// optional bool fann_trained = 15;
inline bool FannTrainProject_FannOptions::has_fann_trained() const {
  return _has_bit(14);
}
inline void FannTrainProject_FannOptions::clear_fann_trained() {
  fann_trained_ = false;
  _clear_bit(14);
}
inline bool FannTrainProject_FannOptions::fann_trained() const {
  return fann_trained_;
}
inline void FannTrainProject_FannOptions::set_fann_trained(bool value) {
  _set_bit(14);
  fann_trained_ = value;
}

// -------------------------------------------------------------------

// FannTrainProject_TrainIo_FValues

// repeated double values = 1;
inline int FannTrainProject_TrainIo_FValues::values_size() const {
  return values_.size();
}
inline void FannTrainProject_TrainIo_FValues::clear_values() {
  values_.Clear();
}
inline double FannTrainProject_TrainIo_FValues::values(int index) const {
  return values_.Get(index);
}
inline void FannTrainProject_TrainIo_FValues::set_values(int index, double value) {
  values_.Set(index, value);
}
inline void FannTrainProject_TrainIo_FValues::add_values(double value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
FannTrainProject_TrainIo_FValues::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
FannTrainProject_TrainIo_FValues::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// FannTrainProject_TrainIo

// required .fann_train_cfg.FannTrainProject.TrainIo.IoType type = 1;
inline bool FannTrainProject_TrainIo::has_type() const {
  return _has_bit(0);
}
inline void FannTrainProject_TrainIo::clear_type() {
  type_ = 0;
  _clear_bit(0);
}
inline ::fann_train_cfg::FannTrainProject_TrainIo_IoType FannTrainProject_TrainIo::type() const {
  return static_cast< ::fann_train_cfg::FannTrainProject_TrainIo_IoType >(type_);
}
inline void FannTrainProject_TrainIo::set_type(::fann_train_cfg::FannTrainProject_TrainIo_IoType value) {
  GOOGLE_DCHECK(::fann_train_cfg::FannTrainProject_TrainIo_IoType_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// optional string file_name = 2;
inline bool FannTrainProject_TrainIo::has_file_name() const {
  return _has_bit(1);
}
inline void FannTrainProject_TrainIo::clear_file_name() {
  if (file_name_ != &_default_file_name_) {
    file_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& FannTrainProject_TrainIo::file_name() const {
  return *file_name_;
}
inline void FannTrainProject_TrainIo::set_file_name(const ::std::string& value) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void FannTrainProject_TrainIo::set_file_name(const char* value) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void FannTrainProject_TrainIo::set_file_name(const char* value, size_t size) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FannTrainProject_TrainIo::mutable_file_name() {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}

// optional double value = 3;
inline bool FannTrainProject_TrainIo::has_value() const {
  return _has_bit(2);
}
inline void FannTrainProject_TrainIo::clear_value() {
  value_ = 0;
  _clear_bit(2);
}
inline double FannTrainProject_TrainIo::value() const {
  return value_;
}
inline void FannTrainProject_TrainIo::set_value(double value) {
  _set_bit(2);
  value_ = value;
}

// repeated double values = 4;
inline int FannTrainProject_TrainIo::values_size() const {
  return values_.size();
}
inline void FannTrainProject_TrainIo::clear_values() {
  values_.Clear();
}
inline double FannTrainProject_TrainIo::values(int index) const {
  return values_.Get(index);
}
inline void FannTrainProject_TrainIo::set_values(int index, double value) {
  values_.Set(index, value);
}
inline void FannTrainProject_TrainIo::add_values(double value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
FannTrainProject_TrainIo::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
FannTrainProject_TrainIo::mutable_values() {
  return &values_;
}

// repeated .fann_train_cfg.FannTrainProject.TrainIo.FValues fvalues = 5;
inline int FannTrainProject_TrainIo::fvalues_size() const {
  return fvalues_.size();
}
inline void FannTrainProject_TrainIo::clear_fvalues() {
  fvalues_.Clear();
}
inline const ::fann_train_cfg::FannTrainProject_TrainIo_FValues& FannTrainProject_TrainIo::fvalues(int index) const {
  return fvalues_.Get(index);
}
inline ::fann_train_cfg::FannTrainProject_TrainIo_FValues* FannTrainProject_TrainIo::mutable_fvalues(int index) {
  return fvalues_.Mutable(index);
}
inline ::fann_train_cfg::FannTrainProject_TrainIo_FValues* FannTrainProject_TrainIo::add_fvalues() {
  return fvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fann_train_cfg::FannTrainProject_TrainIo_FValues >&
FannTrainProject_TrainIo::fvalues() const {
  return fvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::fann_train_cfg::FannTrainProject_TrainIo_FValues >*
FannTrainProject_TrainIo::mutable_fvalues() {
  return &fvalues_;
}

// optional string extract_regex = 6;
inline bool FannTrainProject_TrainIo::has_extract_regex() const {
  return _has_bit(5);
}
inline void FannTrainProject_TrainIo::clear_extract_regex() {
  if (extract_regex_ != &_default_extract_regex_) {
    extract_regex_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& FannTrainProject_TrainIo::extract_regex() const {
  return *extract_regex_;
}
inline void FannTrainProject_TrainIo::set_extract_regex(const ::std::string& value) {
  _set_bit(5);
  if (extract_regex_ == &_default_extract_regex_) {
    extract_regex_ = new ::std::string;
  }
  extract_regex_->assign(value);
}
inline void FannTrainProject_TrainIo::set_extract_regex(const char* value) {
  _set_bit(5);
  if (extract_regex_ == &_default_extract_regex_) {
    extract_regex_ = new ::std::string;
  }
  extract_regex_->assign(value);
}
inline void FannTrainProject_TrainIo::set_extract_regex(const char* value, size_t size) {
  _set_bit(5);
  if (extract_regex_ == &_default_extract_regex_) {
    extract_regex_ = new ::std::string;
  }
  extract_regex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FannTrainProject_TrainIo::mutable_extract_regex() {
  _set_bit(5);
  if (extract_regex_ == &_default_extract_regex_) {
    extract_regex_ = new ::std::string;
  }
  return extract_regex_;
}

// -------------------------------------------------------------------

// FannTrainProject_TrainEntry

// required string name = 1;
inline bool FannTrainProject_TrainEntry::has_name() const {
  return _has_bit(0);
}
inline void FannTrainProject_TrainEntry::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& FannTrainProject_TrainEntry::name() const {
  return *name_;
}
inline void FannTrainProject_TrainEntry::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FannTrainProject_TrainEntry::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FannTrainProject_TrainEntry::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FannTrainProject_TrainEntry::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required .fann_train_cfg.FannTrainProject.TrainIo input = 2;
inline bool FannTrainProject_TrainEntry::has_input() const {
  return _has_bit(1);
}
inline void FannTrainProject_TrainEntry::clear_input() {
  if (input_ != NULL) input_->::fann_train_cfg::FannTrainProject_TrainIo::Clear();
  _clear_bit(1);
}
inline const ::fann_train_cfg::FannTrainProject_TrainIo& FannTrainProject_TrainEntry::input() const {
  return input_ != NULL ? *input_ : *default_instance_->input_;
}
inline ::fann_train_cfg::FannTrainProject_TrainIo* FannTrainProject_TrainEntry::mutable_input() {
  _set_bit(1);
  if (input_ == NULL) input_ = new ::fann_train_cfg::FannTrainProject_TrainIo;
  return input_;
}

// required .fann_train_cfg.FannTrainProject.TrainIo output = 3;
inline bool FannTrainProject_TrainEntry::has_output() const {
  return _has_bit(2);
}
inline void FannTrainProject_TrainEntry::clear_output() {
  if (output_ != NULL) output_->::fann_train_cfg::FannTrainProject_TrainIo::Clear();
  _clear_bit(2);
}
inline const ::fann_train_cfg::FannTrainProject_TrainIo& FannTrainProject_TrainEntry::output() const {
  return output_ != NULL ? *output_ : *default_instance_->output_;
}
inline ::fann_train_cfg::FannTrainProject_TrainIo* FannTrainProject_TrainEntry::mutable_output() {
  _set_bit(2);
  if (output_ == NULL) output_ = new ::fann_train_cfg::FannTrainProject_TrainIo;
  return output_;
}

// -------------------------------------------------------------------

// FannTrainProject

// required string name = 1;
inline bool FannTrainProject::has_name() const {
  return _has_bit(0);
}
inline void FannTrainProject::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& FannTrainProject::name() const {
  return *name_;
}
inline void FannTrainProject::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FannTrainProject::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FannTrainProject::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FannTrainProject::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string file_name = 2;
inline bool FannTrainProject::has_file_name() const {
  return _has_bit(1);
}
inline void FannTrainProject::clear_file_name() {
  if (file_name_ != &_default_file_name_) {
    file_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& FannTrainProject::file_name() const {
  return *file_name_;
}
inline void FannTrainProject::set_file_name(const ::std::string& value) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void FannTrainProject::set_file_name(const char* value) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void FannTrainProject::set_file_name(const char* value, size_t size) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FannTrainProject::mutable_file_name() {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}

// optional string description = 3;
inline bool FannTrainProject::has_description() const {
  return _has_bit(2);
}
inline void FannTrainProject::clear_description() {
  if (description_ != &_default_description_) {
    description_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& FannTrainProject::description() const {
  return *description_;
}
inline void FannTrainProject::set_description(const ::std::string& value) {
  _set_bit(2);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void FannTrainProject::set_description(const char* value) {
  _set_bit(2);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void FannTrainProject::set_description(const char* value, size_t size) {
  _set_bit(2);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FannTrainProject::mutable_description() {
  _set_bit(2);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  return description_;
}

// required .fann_train_cfg.FannTrainProject.FannOptions fann_opts = 4;
inline bool FannTrainProject::has_fann_opts() const {
  return _has_bit(3);
}
inline void FannTrainProject::clear_fann_opts() {
  if (fann_opts_ != NULL) fann_opts_->::fann_train_cfg::FannTrainProject_FannOptions::Clear();
  _clear_bit(3);
}
inline const ::fann_train_cfg::FannTrainProject_FannOptions& FannTrainProject::fann_opts() const {
  return fann_opts_ != NULL ? *fann_opts_ : *default_instance_->fann_opts_;
}
inline ::fann_train_cfg::FannTrainProject_FannOptions* FannTrainProject::mutable_fann_opts() {
  _set_bit(3);
  if (fann_opts_ == NULL) fann_opts_ = new ::fann_train_cfg::FannTrainProject_FannOptions;
  return fann_opts_;
}

// repeated .fann_train_cfg.FannTrainProject.TrainEntry entries = 5;
inline int FannTrainProject::entries_size() const {
  return entries_.size();
}
inline void FannTrainProject::clear_entries() {
  entries_.Clear();
}
inline const ::fann_train_cfg::FannTrainProject_TrainEntry& FannTrainProject::entries(int index) const {
  return entries_.Get(index);
}
inline ::fann_train_cfg::FannTrainProject_TrainEntry* FannTrainProject::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline ::fann_train_cfg::FannTrainProject_TrainEntry* FannTrainProject::add_entries() {
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fann_train_cfg::FannTrainProject_TrainEntry >&
FannTrainProject::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::fann_train_cfg::FannTrainProject_TrainEntry >*
FannTrainProject::mutable_entries() {
  return &entries_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fann_train_cfg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fann_train_cfg::FannTrainProject_TrainIo_IoType>() {
  return ::fann_train_cfg::FannTrainProject_TrainIo_IoType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cfg_5fserialize_2eproto__INCLUDED
