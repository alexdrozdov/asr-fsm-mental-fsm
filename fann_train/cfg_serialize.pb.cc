// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cfg_serialize.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fann_train_cfg {

namespace {

const ::google::protobuf::Descriptor* FannTrainProject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FannTrainProject_reflection_ = NULL;
const ::google::protobuf::Descriptor* FannTrainProject_FannOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FannTrainProject_FannOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* FannTrainProject_TrainIo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FannTrainProject_TrainIo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FannTrainProject_TrainIo_FValues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FannTrainProject_TrainIo_FValues_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FannTrainProject_TrainIo_IoType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FannTrainProject_TrainEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FannTrainProject_TrainEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cfg_5fserialize_2eproto() {
  protobuf_AddDesc_cfg_5fserialize_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cfg_serialize.proto");
  GOOGLE_CHECK(file != NULL);
  FannTrainProject_descriptor_ = file->message_type(0);
  static const int FannTrainProject_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject, fann_opts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject, entries_),
  };
  FannTrainProject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FannTrainProject_descriptor_,
      FannTrainProject::default_instance_,
      FannTrainProject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FannTrainProject));
  FannTrainProject_FannOptions_descriptor_ = FannTrainProject_descriptor_->nested_type(0);
  static const int FannTrainProject_FannOptions_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, num_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, num_layers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, num_neurons_hidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, desired_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, max_epochs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, epochs_between_reports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, b_i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, b_o_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, b_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, b_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, b_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, b_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, fann_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, fann_trained_),
  };
  FannTrainProject_FannOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FannTrainProject_FannOptions_descriptor_,
      FannTrainProject_FannOptions::default_instance_,
      FannTrainProject_FannOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_FannOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FannTrainProject_FannOptions));
  FannTrainProject_TrainIo_descriptor_ = FannTrainProject_descriptor_->nested_type(1);
  static const int FannTrainProject_TrainIo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainIo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainIo, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainIo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainIo, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainIo, fvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainIo, extract_regex_),
  };
  FannTrainProject_TrainIo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FannTrainProject_TrainIo_descriptor_,
      FannTrainProject_TrainIo::default_instance_,
      FannTrainProject_TrainIo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainIo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainIo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FannTrainProject_TrainIo));
  FannTrainProject_TrainIo_FValues_descriptor_ = FannTrainProject_TrainIo_descriptor_->nested_type(0);
  static const int FannTrainProject_TrainIo_FValues_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainIo_FValues, values_),
  };
  FannTrainProject_TrainIo_FValues_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FannTrainProject_TrainIo_FValues_descriptor_,
      FannTrainProject_TrainIo_FValues::default_instance_,
      FannTrainProject_TrainIo_FValues_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainIo_FValues, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainIo_FValues, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FannTrainProject_TrainIo_FValues));
  FannTrainProject_TrainIo_IoType_descriptor_ = FannTrainProject_TrainIo_descriptor_->enum_type(0);
  FannTrainProject_TrainEntry_descriptor_ = FannTrainProject_descriptor_->nested_type(2);
  static const int FannTrainProject_TrainEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainEntry, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainEntry, output_),
  };
  FannTrainProject_TrainEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FannTrainProject_TrainEntry_descriptor_,
      FannTrainProject_TrainEntry::default_instance_,
      FannTrainProject_TrainEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FannTrainProject_TrainEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FannTrainProject_TrainEntry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cfg_5fserialize_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FannTrainProject_descriptor_, &FannTrainProject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FannTrainProject_FannOptions_descriptor_, &FannTrainProject_FannOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FannTrainProject_TrainIo_descriptor_, &FannTrainProject_TrainIo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FannTrainProject_TrainIo_FValues_descriptor_, &FannTrainProject_TrainIo_FValues::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FannTrainProject_TrainEntry_descriptor_, &FannTrainProject_TrainEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cfg_5fserialize_2eproto() {
  delete FannTrainProject::default_instance_;
  delete FannTrainProject_reflection_;
  delete FannTrainProject_FannOptions::default_instance_;
  delete FannTrainProject_FannOptions_reflection_;
  delete FannTrainProject_TrainIo::default_instance_;
  delete FannTrainProject_TrainIo_reflection_;
  delete FannTrainProject_TrainIo_FValues::default_instance_;
  delete FannTrainProject_TrainIo_FValues_reflection_;
  delete FannTrainProject_TrainEntry::default_instance_;
  delete FannTrainProject_TrainEntry_reflection_;
}

void protobuf_AddDesc_cfg_5fserialize_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023cfg_serialize.proto\022\016fann_train_cfg\"\256\007"
    "\n\020FannTrainProject\022\014\n\004name\030\001 \002(\t\022\021\n\tfile"
    "_name\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022?\n\tfann"
    "_opts\030\004 \002(\0132,.fann_train_cfg.FannTrainPr"
    "oject.FannOptions\022<\n\007entries\030\005 \003(\0132+.fan"
    "n_train_cfg.FannTrainProject.TrainEntry\032"
    "\253\002\n\013FannOptions\022\021\n\tnum_input\030\001 \002(\005\022\022\n\nnu"
    "m_output\030\002 \002(\005\022\022\n\nnum_layers\030\003 \002(\005\022\032\n\022nu"
    "m_neurons_hidden\030\004 \002(\005\022\025\n\rdesired_error\030"
    "\005 \002(\001\022\022\n\nmax_epochs\030\006 \002(\005\022\036\n\026epochs_betw"
    "een_reports\030\007 \002(\005\022\013\n\003b_i\030\010 \002(\010\022\013\n\003b_o\030\t "
    "\002(\010\022\013\n\003b_h\030\n \002(\010\022\013\n\003b_l\030\013 \002(\010\022\013\n\003b_t\030\014 \002"
    "(\010\022\013\n\003b_n\030\r \002(\010\022\026\n\016fann_file_name\030\016 \001(\t\022"
    "\024\n\014fann_trained\030\017 \001(\010\032\246\002\n\007TrainIo\022=\n\004typ"
    "e\030\001 \002(\0162/.fann_train_cfg.FannTrainProjec"
    "t.TrainIo.IoType\022\021\n\tfile_name\030\002 \001(\t\022\r\n\005v"
    "alue\030\003 \001(\001\022\016\n\006values\030\004 \003(\001\022A\n\007fvalues\030\005 "
    "\003(\01320.fann_train_cfg.FannTrainProject.Tr"
    "ainIo.FValues\022\025\n\rextract_regex\030\006 \001(\t\032\031\n\007"
    "FValues\022\016\n\006values\030\001 \003(\001\"5\n\006IoType\022\r\n\tIOT"
    "_VALUE\020\000\022\014\n\010IOT_FILE\020\001\022\016\n\nIOT_VECTOR\020\002\032\215"
    "\001\n\nTrainEntry\022\014\n\004name\030\001 \002(\t\0227\n\005input\030\002 \002"
    "(\0132(.fann_train_cfg.FannTrainProject.Tra"
    "inIo\0228\n\006output\030\003 \002(\0132(.fann_train_cfg.Fa"
    "nnTrainProject.TrainIoB\036\n\016fann_train_cfg"
    "B\014FannTrainCfg", 1014);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cfg_serialize.proto", &protobuf_RegisterTypes);
  FannTrainProject::default_instance_ = new FannTrainProject();
  FannTrainProject_FannOptions::default_instance_ = new FannTrainProject_FannOptions();
  FannTrainProject_TrainIo::default_instance_ = new FannTrainProject_TrainIo();
  FannTrainProject_TrainIo_FValues::default_instance_ = new FannTrainProject_TrainIo_FValues();
  FannTrainProject_TrainEntry::default_instance_ = new FannTrainProject_TrainEntry();
  FannTrainProject::default_instance_->InitAsDefaultInstance();
  FannTrainProject_FannOptions::default_instance_->InitAsDefaultInstance();
  FannTrainProject_TrainIo::default_instance_->InitAsDefaultInstance();
  FannTrainProject_TrainIo_FValues::default_instance_->InitAsDefaultInstance();
  FannTrainProject_TrainEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cfg_5fserialize_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cfg_5fserialize_2eproto {
  StaticDescriptorInitializer_cfg_5fserialize_2eproto() {
    protobuf_AddDesc_cfg_5fserialize_2eproto();
  }
} static_descriptor_initializer_cfg_5fserialize_2eproto_;


// ===================================================================

const ::std::string FannTrainProject_FannOptions::_default_fann_file_name_;
#ifndef _MSC_VER
const int FannTrainProject_FannOptions::kNumInputFieldNumber;
const int FannTrainProject_FannOptions::kNumOutputFieldNumber;
const int FannTrainProject_FannOptions::kNumLayersFieldNumber;
const int FannTrainProject_FannOptions::kNumNeuronsHiddenFieldNumber;
const int FannTrainProject_FannOptions::kDesiredErrorFieldNumber;
const int FannTrainProject_FannOptions::kMaxEpochsFieldNumber;
const int FannTrainProject_FannOptions::kEpochsBetweenReportsFieldNumber;
const int FannTrainProject_FannOptions::kBIFieldNumber;
const int FannTrainProject_FannOptions::kBOFieldNumber;
const int FannTrainProject_FannOptions::kBHFieldNumber;
const int FannTrainProject_FannOptions::kBLFieldNumber;
const int FannTrainProject_FannOptions::kBTFieldNumber;
const int FannTrainProject_FannOptions::kBNFieldNumber;
const int FannTrainProject_FannOptions::kFannFileNameFieldNumber;
const int FannTrainProject_FannOptions::kFannTrainedFieldNumber;
#endif  // !_MSC_VER

FannTrainProject_FannOptions::FannTrainProject_FannOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FannTrainProject_FannOptions::InitAsDefaultInstance() {
}

FannTrainProject_FannOptions::FannTrainProject_FannOptions(const FannTrainProject_FannOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FannTrainProject_FannOptions::SharedCtor() {
  _cached_size_ = 0;
  num_input_ = 0;
  num_output_ = 0;
  num_layers_ = 0;
  num_neurons_hidden_ = 0;
  desired_error_ = 0;
  max_epochs_ = 0;
  epochs_between_reports_ = 0;
  b_i_ = false;
  b_o_ = false;
  b_h_ = false;
  b_l_ = false;
  b_t_ = false;
  b_n_ = false;
  fann_file_name_ = const_cast< ::std::string*>(&_default_fann_file_name_);
  fann_trained_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FannTrainProject_FannOptions::~FannTrainProject_FannOptions() {
  SharedDtor();
}

void FannTrainProject_FannOptions::SharedDtor() {
  if (fann_file_name_ != &_default_fann_file_name_) {
    delete fann_file_name_;
  }
  if (this != default_instance_) {
  }
}

void FannTrainProject_FannOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FannTrainProject_FannOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FannTrainProject_FannOptions_descriptor_;
}

const FannTrainProject_FannOptions& FannTrainProject_FannOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fserialize_2eproto();  return *default_instance_;
}

FannTrainProject_FannOptions* FannTrainProject_FannOptions::default_instance_ = NULL;

FannTrainProject_FannOptions* FannTrainProject_FannOptions::New() const {
  return new FannTrainProject_FannOptions;
}

void FannTrainProject_FannOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_input_ = 0;
    num_output_ = 0;
    num_layers_ = 0;
    num_neurons_hidden_ = 0;
    desired_error_ = 0;
    max_epochs_ = 0;
    epochs_between_reports_ = 0;
    b_i_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    b_o_ = false;
    b_h_ = false;
    b_l_ = false;
    b_t_ = false;
    b_n_ = false;
    if (_has_bit(13)) {
      if (fann_file_name_ != &_default_fann_file_name_) {
        fann_file_name_->clear();
      }
    }
    fann_trained_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FannTrainProject_FannOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_input = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_input_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_output;
        break;
      }
      
      // required int32 num_output = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_output_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_layers;
        break;
      }
      
      // required int32 num_layers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_layers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_layers_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_neurons_hidden;
        break;
      }
      
      // required int32 num_neurons_hidden = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_neurons_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_neurons_hidden_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_desired_error;
        break;
      }
      
      // required double desired_error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_desired_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &desired_error_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_epochs;
        break;
      }
      
      // required int32 max_epochs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_epochs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_epochs_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_epochs_between_reports;
        break;
      }
      
      // required int32 epochs_between_reports = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_epochs_between_reports:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epochs_between_reports_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_b_i;
        break;
      }
      
      // required bool b_i = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_i_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_b_o;
        break;
      }
      
      // required bool b_o = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_o:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_o_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_b_h;
        break;
      }
      
      // required bool b_h = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_h_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_b_l;
        break;
      }
      
      // required bool b_l = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_l_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_b_t;
        break;
      }
      
      // required bool b_t = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_t_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_b_n;
        break;
      }
      
      // required bool b_n = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_n_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_fann_file_name;
        break;
      }
      
      // optional string fann_file_name = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fann_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fann_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fann_file_name().data(), this->fann_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fann_trained;
        break;
      }
      
      // optional bool fann_trained = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fann_trained:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fann_trained_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FannTrainProject_FannOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num_input = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_input(), output);
  }
  
  // required int32 num_output = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_output(), output);
  }
  
  // required int32 num_layers = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_layers(), output);
  }
  
  // required int32 num_neurons_hidden = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_neurons_hidden(), output);
  }
  
  // required double desired_error = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->desired_error(), output);
  }
  
  // required int32 max_epochs = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_epochs(), output);
  }
  
  // required int32 epochs_between_reports = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->epochs_between_reports(), output);
  }
  
  // required bool b_i = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->b_i(), output);
  }
  
  // required bool b_o = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->b_o(), output);
  }
  
  // required bool b_h = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->b_h(), output);
  }
  
  // required bool b_l = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->b_l(), output);
  }
  
  // required bool b_t = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->b_t(), output);
  }
  
  // required bool b_n = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->b_n(), output);
  }
  
  // optional string fann_file_name = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fann_file_name().data(), this->fann_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->fann_file_name(), output);
  }
  
  // optional bool fann_trained = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->fann_trained(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FannTrainProject_FannOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num_input = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_input(), target);
  }
  
  // required int32 num_output = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_output(), target);
  }
  
  // required int32 num_layers = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_layers(), target);
  }
  
  // required int32 num_neurons_hidden = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_neurons_hidden(), target);
  }
  
  // required double desired_error = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->desired_error(), target);
  }
  
  // required int32 max_epochs = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_epochs(), target);
  }
  
  // required int32 epochs_between_reports = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->epochs_between_reports(), target);
  }
  
  // required bool b_i = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->b_i(), target);
  }
  
  // required bool b_o = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->b_o(), target);
  }
  
  // required bool b_h = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->b_h(), target);
  }
  
  // required bool b_l = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->b_l(), target);
  }
  
  // required bool b_t = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->b_t(), target);
  }
  
  // required bool b_n = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->b_n(), target);
  }
  
  // optional string fann_file_name = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fann_file_name().data(), this->fann_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->fann_file_name(), target);
  }
  
  // optional bool fann_trained = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->fann_trained(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FannTrainProject_FannOptions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num_input = 1;
    if (has_num_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_input());
    }
    
    // required int32 num_output = 2;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_output());
    }
    
    // required int32 num_layers = 3;
    if (has_num_layers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_layers());
    }
    
    // required int32 num_neurons_hidden = 4;
    if (has_num_neurons_hidden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_neurons_hidden());
    }
    
    // required double desired_error = 5;
    if (has_desired_error()) {
      total_size += 1 + 8;
    }
    
    // required int32 max_epochs = 6;
    if (has_max_epochs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_epochs());
    }
    
    // required int32 epochs_between_reports = 7;
    if (has_epochs_between_reports()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->epochs_between_reports());
    }
    
    // required bool b_i = 8;
    if (has_b_i()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool b_o = 9;
    if (has_b_o()) {
      total_size += 1 + 1;
    }
    
    // required bool b_h = 10;
    if (has_b_h()) {
      total_size += 1 + 1;
    }
    
    // required bool b_l = 11;
    if (has_b_l()) {
      total_size += 1 + 1;
    }
    
    // required bool b_t = 12;
    if (has_b_t()) {
      total_size += 1 + 1;
    }
    
    // required bool b_n = 13;
    if (has_b_n()) {
      total_size += 1 + 1;
    }
    
    // optional string fann_file_name = 14;
    if (has_fann_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fann_file_name());
    }
    
    // optional bool fann_trained = 15;
    if (has_fann_trained()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FannTrainProject_FannOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FannTrainProject_FannOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FannTrainProject_FannOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FannTrainProject_FannOptions::MergeFrom(const FannTrainProject_FannOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_num_input(from.num_input());
    }
    if (from._has_bit(1)) {
      set_num_output(from.num_output());
    }
    if (from._has_bit(2)) {
      set_num_layers(from.num_layers());
    }
    if (from._has_bit(3)) {
      set_num_neurons_hidden(from.num_neurons_hidden());
    }
    if (from._has_bit(4)) {
      set_desired_error(from.desired_error());
    }
    if (from._has_bit(5)) {
      set_max_epochs(from.max_epochs());
    }
    if (from._has_bit(6)) {
      set_epochs_between_reports(from.epochs_between_reports());
    }
    if (from._has_bit(7)) {
      set_b_i(from.b_i());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_b_o(from.b_o());
    }
    if (from._has_bit(9)) {
      set_b_h(from.b_h());
    }
    if (from._has_bit(10)) {
      set_b_l(from.b_l());
    }
    if (from._has_bit(11)) {
      set_b_t(from.b_t());
    }
    if (from._has_bit(12)) {
      set_b_n(from.b_n());
    }
    if (from._has_bit(13)) {
      set_fann_file_name(from.fann_file_name());
    }
    if (from._has_bit(14)) {
      set_fann_trained(from.fann_trained());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FannTrainProject_FannOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FannTrainProject_FannOptions::CopyFrom(const FannTrainProject_FannOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FannTrainProject_FannOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  
  return true;
}

void FannTrainProject_FannOptions::Swap(FannTrainProject_FannOptions* other) {
  if (other != this) {
    std::swap(num_input_, other->num_input_);
    std::swap(num_output_, other->num_output_);
    std::swap(num_layers_, other->num_layers_);
    std::swap(num_neurons_hidden_, other->num_neurons_hidden_);
    std::swap(desired_error_, other->desired_error_);
    std::swap(max_epochs_, other->max_epochs_);
    std::swap(epochs_between_reports_, other->epochs_between_reports_);
    std::swap(b_i_, other->b_i_);
    std::swap(b_o_, other->b_o_);
    std::swap(b_h_, other->b_h_);
    std::swap(b_l_, other->b_l_);
    std::swap(b_t_, other->b_t_);
    std::swap(b_n_, other->b_n_);
    std::swap(fann_file_name_, other->fann_file_name_);
    std::swap(fann_trained_, other->fann_trained_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FannTrainProject_FannOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FannTrainProject_FannOptions_descriptor_;
  metadata.reflection = FannTrainProject_FannOptions_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* FannTrainProject_TrainIo_IoType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FannTrainProject_TrainIo_IoType_descriptor_;
}
bool FannTrainProject_TrainIo_IoType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FannTrainProject_TrainIo_IoType FannTrainProject_TrainIo::IOT_VALUE;
const FannTrainProject_TrainIo_IoType FannTrainProject_TrainIo::IOT_FILE;
const FannTrainProject_TrainIo_IoType FannTrainProject_TrainIo::IOT_VECTOR;
const FannTrainProject_TrainIo_IoType FannTrainProject_TrainIo::IoType_MIN;
const FannTrainProject_TrainIo_IoType FannTrainProject_TrainIo::IoType_MAX;
const int FannTrainProject_TrainIo::IoType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FannTrainProject_TrainIo_FValues::kValuesFieldNumber;
#endif  // !_MSC_VER

FannTrainProject_TrainIo_FValues::FannTrainProject_TrainIo_FValues()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FannTrainProject_TrainIo_FValues::InitAsDefaultInstance() {
}

FannTrainProject_TrainIo_FValues::FannTrainProject_TrainIo_FValues(const FannTrainProject_TrainIo_FValues& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FannTrainProject_TrainIo_FValues::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FannTrainProject_TrainIo_FValues::~FannTrainProject_TrainIo_FValues() {
  SharedDtor();
}

void FannTrainProject_TrainIo_FValues::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FannTrainProject_TrainIo_FValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FannTrainProject_TrainIo_FValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FannTrainProject_TrainIo_FValues_descriptor_;
}

const FannTrainProject_TrainIo_FValues& FannTrainProject_TrainIo_FValues::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fserialize_2eproto();  return *default_instance_;
}

FannTrainProject_TrainIo_FValues* FannTrainProject_TrainIo_FValues::default_instance_ = NULL;

FannTrainProject_TrainIo_FValues* FannTrainProject_TrainIo_FValues::New() const {
  return new FannTrainProject_TrainIo_FValues;
}

void FannTrainProject_TrainIo_FValues::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FannTrainProject_TrainIo_FValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FannTrainProject_TrainIo_FValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->values(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FannTrainProject_TrainIo_FValues::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->values(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FannTrainProject_TrainIo_FValues::ByteSize() const {
  int total_size = 0;
  
  // repeated double values = 1;
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FannTrainProject_TrainIo_FValues::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FannTrainProject_TrainIo_FValues* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FannTrainProject_TrainIo_FValues*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FannTrainProject_TrainIo_FValues::MergeFrom(const FannTrainProject_TrainIo_FValues& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FannTrainProject_TrainIo_FValues::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FannTrainProject_TrainIo_FValues::CopyFrom(const FannTrainProject_TrainIo_FValues& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FannTrainProject_TrainIo_FValues::IsInitialized() const {
  
  return true;
}

void FannTrainProject_TrainIo_FValues::Swap(FannTrainProject_TrainIo_FValues* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FannTrainProject_TrainIo_FValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FannTrainProject_TrainIo_FValues_descriptor_;
  metadata.reflection = FannTrainProject_TrainIo_FValues_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string FannTrainProject_TrainIo::_default_file_name_;
const ::std::string FannTrainProject_TrainIo::_default_extract_regex_;
#ifndef _MSC_VER
const int FannTrainProject_TrainIo::kTypeFieldNumber;
const int FannTrainProject_TrainIo::kFileNameFieldNumber;
const int FannTrainProject_TrainIo::kValueFieldNumber;
const int FannTrainProject_TrainIo::kValuesFieldNumber;
const int FannTrainProject_TrainIo::kFvaluesFieldNumber;
const int FannTrainProject_TrainIo::kExtractRegexFieldNumber;
#endif  // !_MSC_VER

FannTrainProject_TrainIo::FannTrainProject_TrainIo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FannTrainProject_TrainIo::InitAsDefaultInstance() {
}

FannTrainProject_TrainIo::FannTrainProject_TrainIo(const FannTrainProject_TrainIo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FannTrainProject_TrainIo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  file_name_ = const_cast< ::std::string*>(&_default_file_name_);
  value_ = 0;
  extract_regex_ = const_cast< ::std::string*>(&_default_extract_regex_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FannTrainProject_TrainIo::~FannTrainProject_TrainIo() {
  SharedDtor();
}

void FannTrainProject_TrainIo::SharedDtor() {
  if (file_name_ != &_default_file_name_) {
    delete file_name_;
  }
  if (extract_regex_ != &_default_extract_regex_) {
    delete extract_regex_;
  }
  if (this != default_instance_) {
  }
}

void FannTrainProject_TrainIo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FannTrainProject_TrainIo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FannTrainProject_TrainIo_descriptor_;
}

const FannTrainProject_TrainIo& FannTrainProject_TrainIo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fserialize_2eproto();  return *default_instance_;
}

FannTrainProject_TrainIo* FannTrainProject_TrainIo::default_instance_ = NULL;

FannTrainProject_TrainIo* FannTrainProject_TrainIo::New() const {
  return new FannTrainProject_TrainIo;
}

void FannTrainProject_TrainIo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (_has_bit(1)) {
      if (file_name_ != &_default_file_name_) {
        file_name_->clear();
      }
    }
    value_ = 0;
    if (_has_bit(5)) {
      if (extract_regex_ != &_default_extract_regex_) {
        extract_regex_->clear();
      }
    }
  }
  values_.Clear();
  fvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FannTrainProject_TrainIo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fann_train_cfg.FannTrainProject.TrainIo.IoType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fann_train_cfg::FannTrainProject_TrainIo_IoType_IsValid(value)) {
            set_type(static_cast< ::fann_train_cfg::FannTrainProject_TrainIo_IoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }
      
      // optional string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_value;
        break;
      }
      
      // optional double value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_values;
        break;
      }
      
      // repeated double values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_values;
        if (input->ExpectTag(42)) goto parse_fvalues;
        break;
      }
      
      // repeated .fann_train_cfg.FannTrainProject.TrainIo.FValues fvalues = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fvalues;
        if (input->ExpectTag(50)) goto parse_extract_regex;
        break;
      }
      
      // optional string extract_regex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extract_regex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extract_regex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extract_regex().data(), this->extract_regex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FannTrainProject_TrainIo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fann_train_cfg.FannTrainProject.TrainIo.IoType type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string file_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }
  
  // optional double value = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }
  
  // repeated double values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->values(i), output);
  }
  
  // repeated .fann_train_cfg.FannTrainProject.TrainIo.FValues fvalues = 5;
  for (int i = 0; i < this->fvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fvalues(i), output);
  }
  
  // optional string extract_regex = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extract_regex().data(), this->extract_regex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->extract_regex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FannTrainProject_TrainIo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fann_train_cfg.FannTrainProject.TrainIo.IoType type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string file_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }
  
  // optional double value = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }
  
  // repeated double values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->values(i), target);
  }
  
  // repeated .fann_train_cfg.FannTrainProject.TrainIo.FValues fvalues = 5;
  for (int i = 0; i < this->fvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fvalues(i), target);
  }
  
  // optional string extract_regex = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extract_regex().data(), this->extract_regex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->extract_regex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FannTrainProject_TrainIo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fann_train_cfg.FannTrainProject.TrainIo.IoType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }
    
    // optional double value = 3;
    if (has_value()) {
      total_size += 1 + 8;
    }
    
    // optional string extract_regex = 6;
    if (has_extract_regex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extract_regex());
    }
    
  }
  // repeated double values = 4;
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }
  
  // repeated .fann_train_cfg.FannTrainProject.TrainIo.FValues fvalues = 5;
  total_size += 1 * this->fvalues_size();
  for (int i = 0; i < this->fvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FannTrainProject_TrainIo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FannTrainProject_TrainIo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FannTrainProject_TrainIo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FannTrainProject_TrainIo::MergeFrom(const FannTrainProject_TrainIo& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  fvalues_.MergeFrom(from.fvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_file_name(from.file_name());
    }
    if (from._has_bit(2)) {
      set_value(from.value());
    }
    if (from._has_bit(5)) {
      set_extract_regex(from.extract_regex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FannTrainProject_TrainIo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FannTrainProject_TrainIo::CopyFrom(const FannTrainProject_TrainIo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FannTrainProject_TrainIo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FannTrainProject_TrainIo::Swap(FannTrainProject_TrainIo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(file_name_, other->file_name_);
    std::swap(value_, other->value_);
    values_.Swap(&other->values_);
    fvalues_.Swap(&other->fvalues_);
    std::swap(extract_regex_, other->extract_regex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FannTrainProject_TrainIo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FannTrainProject_TrainIo_descriptor_;
  metadata.reflection = FannTrainProject_TrainIo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string FannTrainProject_TrainEntry::_default_name_;
#ifndef _MSC_VER
const int FannTrainProject_TrainEntry::kNameFieldNumber;
const int FannTrainProject_TrainEntry::kInputFieldNumber;
const int FannTrainProject_TrainEntry::kOutputFieldNumber;
#endif  // !_MSC_VER

FannTrainProject_TrainEntry::FannTrainProject_TrainEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FannTrainProject_TrainEntry::InitAsDefaultInstance() {
  input_ = const_cast< ::fann_train_cfg::FannTrainProject_TrainIo*>(&::fann_train_cfg::FannTrainProject_TrainIo::default_instance());
  output_ = const_cast< ::fann_train_cfg::FannTrainProject_TrainIo*>(&::fann_train_cfg::FannTrainProject_TrainIo::default_instance());
}

FannTrainProject_TrainEntry::FannTrainProject_TrainEntry(const FannTrainProject_TrainEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FannTrainProject_TrainEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  input_ = NULL;
  output_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FannTrainProject_TrainEntry::~FannTrainProject_TrainEntry() {
  SharedDtor();
}

void FannTrainProject_TrainEntry::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete input_;
    delete output_;
  }
}

void FannTrainProject_TrainEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FannTrainProject_TrainEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FannTrainProject_TrainEntry_descriptor_;
}

const FannTrainProject_TrainEntry& FannTrainProject_TrainEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fserialize_2eproto();  return *default_instance_;
}

FannTrainProject_TrainEntry* FannTrainProject_TrainEntry::default_instance_ = NULL;

FannTrainProject_TrainEntry* FannTrainProject_TrainEntry::New() const {
  return new FannTrainProject_TrainEntry;
}

void FannTrainProject_TrainEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (input_ != NULL) input_->::fann_train_cfg::FannTrainProject_TrainIo::Clear();
    }
    if (_has_bit(2)) {
      if (output_ != NULL) output_->::fann_train_cfg::FannTrainProject_TrainIo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FannTrainProject_TrainEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_input;
        break;
      }
      
      // required .fann_train_cfg.FannTrainProject.TrainIo input = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_output;
        break;
      }
      
      // required .fann_train_cfg.FannTrainProject.TrainIo output = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FannTrainProject_TrainEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required .fann_train_cfg.FannTrainProject.TrainIo input = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->input(), output);
  }
  
  // required .fann_train_cfg.FannTrainProject.TrainIo output = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->output(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FannTrainProject_TrainEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required .fann_train_cfg.FannTrainProject.TrainIo input = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->input(), target);
  }
  
  // required .fann_train_cfg.FannTrainProject.TrainIo output = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->output(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FannTrainProject_TrainEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .fann_train_cfg.FannTrainProject.TrainIo input = 2;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input());
    }
    
    // required .fann_train_cfg.FannTrainProject.TrainIo output = 3;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FannTrainProject_TrainEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FannTrainProject_TrainEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FannTrainProject_TrainEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FannTrainProject_TrainEntry::MergeFrom(const FannTrainProject_TrainEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      mutable_input()->::fann_train_cfg::FannTrainProject_TrainIo::MergeFrom(from.input());
    }
    if (from._has_bit(2)) {
      mutable_output()->::fann_train_cfg::FannTrainProject_TrainIo::MergeFrom(from.output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FannTrainProject_TrainEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FannTrainProject_TrainEntry::CopyFrom(const FannTrainProject_TrainEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FannTrainProject_TrainEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_input()) {
    if (!this->input().IsInitialized()) return false;
  }
  if (has_output()) {
    if (!this->output().IsInitialized()) return false;
  }
  return true;
}

void FannTrainProject_TrainEntry::Swap(FannTrainProject_TrainEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(input_, other->input_);
    std::swap(output_, other->output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FannTrainProject_TrainEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FannTrainProject_TrainEntry_descriptor_;
  metadata.reflection = FannTrainProject_TrainEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string FannTrainProject::_default_name_;
const ::std::string FannTrainProject::_default_file_name_;
const ::std::string FannTrainProject::_default_description_;
#ifndef _MSC_VER
const int FannTrainProject::kNameFieldNumber;
const int FannTrainProject::kFileNameFieldNumber;
const int FannTrainProject::kDescriptionFieldNumber;
const int FannTrainProject::kFannOptsFieldNumber;
const int FannTrainProject::kEntriesFieldNumber;
#endif  // !_MSC_VER

FannTrainProject::FannTrainProject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FannTrainProject::InitAsDefaultInstance() {
  fann_opts_ = const_cast< ::fann_train_cfg::FannTrainProject_FannOptions*>(&::fann_train_cfg::FannTrainProject_FannOptions::default_instance());
}

FannTrainProject::FannTrainProject(const FannTrainProject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FannTrainProject::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  file_name_ = const_cast< ::std::string*>(&_default_file_name_);
  description_ = const_cast< ::std::string*>(&_default_description_);
  fann_opts_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FannTrainProject::~FannTrainProject() {
  SharedDtor();
}

void FannTrainProject::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (file_name_ != &_default_file_name_) {
    delete file_name_;
  }
  if (description_ != &_default_description_) {
    delete description_;
  }
  if (this != default_instance_) {
    delete fann_opts_;
  }
}

void FannTrainProject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FannTrainProject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FannTrainProject_descriptor_;
}

const FannTrainProject& FannTrainProject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fserialize_2eproto();  return *default_instance_;
}

FannTrainProject* FannTrainProject::default_instance_ = NULL;

FannTrainProject* FannTrainProject::New() const {
  return new FannTrainProject;
}

void FannTrainProject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (file_name_ != &_default_file_name_) {
        file_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (description_ != &_default_description_) {
        description_->clear();
      }
    }
    if (_has_bit(3)) {
      if (fann_opts_ != NULL) fann_opts_->::fann_train_cfg::FannTrainProject_FannOptions::Clear();
    }
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FannTrainProject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }
      
      // optional string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }
      
      // optional string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fann_opts;
        break;
      }
      
      // required .fann_train_cfg.FannTrainProject.FannOptions fann_opts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fann_opts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fann_opts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_entries;
        break;
      }
      
      // repeated .fann_train_cfg.FannTrainProject.TrainEntry entries = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FannTrainProject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string file_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }
  
  // optional string description = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }
  
  // required .fann_train_cfg.FannTrainProject.FannOptions fann_opts = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fann_opts(), output);
  }
  
  // repeated .fann_train_cfg.FannTrainProject.TrainEntry entries = 5;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->entries(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FannTrainProject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string file_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }
  
  // optional string description = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }
  
  // required .fann_train_cfg.FannTrainProject.FannOptions fann_opts = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fann_opts(), target);
  }
  
  // repeated .fann_train_cfg.FannTrainProject.TrainEntry entries = 5;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->entries(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FannTrainProject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }
    
    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // required .fann_train_cfg.FannTrainProject.FannOptions fann_opts = 4;
    if (has_fann_opts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fann_opts());
    }
    
  }
  // repeated .fann_train_cfg.FannTrainProject.TrainEntry entries = 5;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FannTrainProject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FannTrainProject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FannTrainProject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FannTrainProject::MergeFrom(const FannTrainProject& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_file_name(from.file_name());
    }
    if (from._has_bit(2)) {
      set_description(from.description());
    }
    if (from._has_bit(3)) {
      mutable_fann_opts()->::fann_train_cfg::FannTrainProject_FannOptions::MergeFrom(from.fann_opts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FannTrainProject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FannTrainProject::CopyFrom(const FannTrainProject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FannTrainProject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  
  if (has_fann_opts()) {
    if (!this->fann_opts().IsInitialized()) return false;
  }
  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void FannTrainProject::Swap(FannTrainProject* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(file_name_, other->file_name_);
    std::swap(description_, other->description_);
    std::swap(fann_opts_, other->fann_opts_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FannTrainProject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FannTrainProject_descriptor_;
  metadata.reflection = FannTrainProject_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fann_train_cfg

// @@protoc_insertion_point(global_scope)
